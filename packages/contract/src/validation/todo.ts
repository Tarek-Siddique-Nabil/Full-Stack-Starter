import { todos } from '@repo/db/src/schema';
import { createSchemaFactory } from 'drizzle-zod';
import { z } from 'zod';

const { createInsertSchema, createSelectSchema, createUpdateSchema } =
  createSchemaFactory({
    // This configuration will only coerce dates. Set `coerce` to `true` to coerce all data types or specify others
    coerce: {
      date: true,
    },
  });

export const TodoSchema = createSelectSchema(todos);
export type Todo = z.infer<typeof TodoSchema>;

export const NewTodoSchema = createInsertSchema(todos, {
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  description: z.string().optional(),
  title: z.string(),
  status: z.enum(['pending', 'in-progress', 'completed']).optional(),
  userId: z.string(),
  id: z.string().optional(), // Optional for insert, will be generated by the database
});

export type NewTodo = z.infer<typeof NewTodoSchema>;

export const UpdateTodoSchema = createUpdateSchema(todos, {
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  description: z.string().optional(),
  title: z.string().optional(),
  status: z.enum(['pending', 'in-progress', 'completed']).optional(),
  id: z.string(),
});
export type UpdateTodo = z.infer<typeof UpdateTodoSchema>;

export const DeleteTodoSchema = z.object({
  id: z.string(),
});

export type DeleteTodo = z.infer<typeof DeleteTodoSchema>;
